[{"filePath":"/home/ervin/Desktop/frontend-v2/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/scripts/optimize-images.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":7,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":8,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import imagemin from 'imagemin';\nimport imageminWebp from 'imagemin-webp';\nimport path from 'path';\n\nasync function run() {\n  const folders = [\n    path.resolve(process.cwd(), 'public'),\n    path.resolve(process.cwd(), 'build', 'assets')\n  ];\n\n  for (const folder of folders) {\n    try {\n      console.log('Optimizing images in', folder);\n      await imagemin([`${folder}/*.{jpg,jpeg,png}`], {\n        destination: folder,\n        plugins: [imageminWebp({ quality: 75 })]\n      });\n    } catch (err) {\n      console.warn('Skipping folder', folder, err.message);\n    }\n  }\n\n  console.log('Done');\n}\n\nrun();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/App.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { AuthProvider } from './AuthContext';\nimport AppRoutes from './routes';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <AppRoutes />\n    </AuthProvider>\n  );\n}\n\nexport default App;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/AuthContext.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":7,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":7,"endColumn":24},{"ruleId":"react/prop-types","severity":2,"message":"'children' is missing in props validation","line":11,"column":32,"nodeType":"Property","messageId":"missingPropType","endLine":11,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { auth } from './services/firebase';\nimport { onAuthStateChanged, signOut } from 'firebase/auth';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {\n      setUser(firebaseUser);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n\n  const logout = () => signOut(auth);\n\n  return (\n    <AuthContext.Provider value={{ user, loading, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/__tests__/LoginPage.test.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":2,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { describe, it, expect } from 'vitest'\nimport { MemoryRouter } from 'react-router-dom'\nimport LoginPage from '../pages/LoginPage'\n\ndescribe('LoginPage', () => {\n  it('renderiza el formulario de login', () => {\n    render(\n      <MemoryRouter>\n        <LoginPage />\n      </MemoryRouter>\n    )\n  const email = screen.getByPlaceholderText(/correo|email|correo electrónico/i)\n  const password = screen.getByPlaceholderText(/contraseña|password/i)\n  const submit = screen.getByRole('button', { name: /iniciar sesión|iniciar sesión|login|submit/i })\n\n    expect(email).toBeInTheDocument()\n    expect(password).toBeInTheDocument()\n    expect(submit).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/AIQuestionGenerator.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'fetchWithRetry' is defined but never used.","line":5,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":60},{"ruleId":"react/prop-types","severity":2,"message":"'onQuestionsGenerated' is missing in props validation","line":9,"column":32,"nodeType":"Property","messageId":"missingPropType","endLine":9,"endColumn":52},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":9,"column":54,"nodeType":"Property","messageId":"missingPropType","endLine":9,"endColumn":61},{"ruleId":"no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":11,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'difficultyLevels' is assigned a value but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'setGeneratedQuestions' is assigned a value but never used.","line":27,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'canCreateGame' is assigned a value but never used.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'setCanCreateGame' is assigned a value but never used.","line":28,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":41}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport ManualQuestionForm from './ManualQuestionForm';\nimport { fetchTopics, fetchDifficultyLevels, fetchWithRetry } from '../services/api';\nimport './AIQuestionGenerator.css';\nimport './common.css';\n\nconst AIQuestionGenerator = ({ onQuestionsGenerated, onClose }) => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [topics, setTopics] = useState([]);\n  const [difficultyLevels, setDifficultyLevels] = useState([]);\n  const [selectedTopic, setSelectedTopic] = useState('');\n  const [selectedDifficulty, setSelectedDifficulty] = useState('medium');\n  const [questionCount, setQuestionCount] = useState(5);\n  const [useAI, setUseAI] = useState(false);\n  const [showManualForm, setShowManualForm] = useState(false);\n  const [manualCount, setManualCount] = useState(3);\n  const [manualStep, setManualStep] = useState(0);\n  const [manualQuestions, setManualQuestions] = useState([]);\n  const [manualTopic, setManualTopic] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  // No necesitamos monitorear este cambio de estado\n  const [error, setError] = useState('');\n  const [generatedQuestions, setGeneratedQuestions] = useState([]);\n  const [canCreateGame, setCanCreateGame] = useState(false);\n\n  useEffect(() => {\n    loadTopics();\n    loadDifficultyLevels();\n  }, []);\n\n  const loadTopics = async () => {\n    try {\n      const topics = await fetchTopics();\n      setTopics(topics);\n      if (topics.length > 0) {\n        setSelectedTopic(topics[0]);\n      }\n    } catch (error) {\n      setError('Error obteniendo temas. Por favor intenta de nuevo.');\n    }\n  };\n\n  const loadDifficultyLevels = async () => {\n    try {\n      const levels = await fetchDifficultyLevels();\n      setDifficultyLevels(levels);\n    } catch (error) {\n      setError('No se pudieron cargar los niveles de dificultad. Por favor, intenta de nuevo más tarde.');\n    }\n  };\n\n  const generateQuestions = async () => {\n    if (!selectedTopic) {\n      setError('Por favor selecciona un tema válido');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const apiBase = import.meta.env.VITE_API_URL;\n      if (!apiBase) {\n        setError('Error de configuración: URL del API no definida');\n        return;\n      }\n      const token = user && user.getIdToken ? await user.getIdToken() : null;\n      const response = await fetch(`${apiBase}/api/ai/generate-questions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token ? { Authorization: `Bearer ${token}` } : {})\n        },\n        body: JSON.stringify({\n          topic: selectedTopic,\n          difficulty: selectedDifficulty,\n          count: questionCount,\n          useAI: useAI\n        }),\n      });\n\n      const data = await response.json();\n      if (data.success) {\n        // Guardar preguntas en Firestore y esperar confirmación exitosa antes de crear la partida\n        const questionsWithMeta = data.questions.map(q => ({\n          // Si las opciones existen, barajarlas y actualizar el índice de la respuesta correcta de forma robusta\n          ...(() => {\n            if (!Array.isArray(q.options) || typeof q.correctAnswerIndex !== 'number') return q;\n            // Asociar cada opción con su índice original\n            const optionsWithIndex = q.options.map((opt, idx) => ({ opt, origIdx: idx }));\n            // Barajar\n            for (let i = optionsWithIndex.length - 1; i > 0; i--) {\n              const j = Math.floor(Math.random() * (i + 1));\n              [optionsWithIndex[i], optionsWithIndex[j]] = [optionsWithIndex[j], optionsWithIndex[i]];\n            }\n            // Buscar la nueva posición de la opción que era la correcta\n            const newCorrectIndex = optionsWithIndex.findIndex(o => o.origIdx === q.correctAnswerIndex);\n            return {\n              ...q,\n              options: optionsWithIndex.map(o => o.opt),\n              correctAnswerIndex: newCorrectIndex\n            };\n          })(),\n          createdBy: user?.uid || 'anon',\n          createdAt: Date.now(),\n          category: selectedTopic,\n          difficulty: selectedDifficulty\n        }));\n        let saveOk = false;\n        try {\n          const bulkToken = user && user.getIdToken ? await user.getIdToken() : null;\n          const response = await fetch(`${apiBase}/api/questions/bulk`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(bulkToken ? { Authorization: `Bearer ${bulkToken}` } : {})\n            },\n            body: JSON.stringify({ questions: questionsWithMeta })\n          });\n          const result = await response.json();\n          if (!result.success) {\n            setError((prev) => (prev ? prev + ' | ' : '') + (result.error || 'Error guardando preguntas en Firestore'));\n            setError('No se pudieron guardar las preguntas. ' + (result.error || 'Por favor, intenta de nuevo.'));\n          } else {\n            saveOk = true;\n          }\n        } catch (e) {\n          setError('Ocurrió un error al guardar las preguntas. Por favor, verifica tu conexión e intenta de nuevo.');\n        }\n        if (!saveOk) {\n          setLoading(false);\n          return;\n        }\n        // Redirigir al usuario a la pantalla principal para que pueda crear la partida manualmente\n        onQuestionsGenerated(data.questions);\n        setLoading(false);\n        // No navegues ni cierres aquí, deja que el Dashboard controle el cierre\n      } else {\n        setError(data.error || 'Error generando preguntas');\n        setError('No se pudieron generar las preguntas: ' + (data.error || 'Por favor, intenta de nuevo.'));\n      }\n    } catch (error) {\n      setError('Error de conexión. Por favor, verifica tu conexión a internet e intenta nuevamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reinicia el contador de preguntas al cerrar el generador para evitar confusión\n  useEffect(() => {\n    if (!loading && !error && generatedQuestions.length === 0) {\n      setQuestionCount(5);\n    }\n  }, [loading, error, generatedQuestions]);\n\n  return (\n    <div className=\"ai-generator-overlay\">\n      <div className=\"ai-generator-modal\">\n        <div className=\"ai-generator-header\">\n          <h2>🤖 Generador de Preguntas</h2>\n          <button className=\"close-btn\" onClick={onClose}>×</button>\n        </div>\n        {/* Selección de método de generación */}\n        {!showManualForm && !useAI && (\n          <div className=\"ai-generator-method-select\">\n            <button \n              type=\"button\"\n              className=\"btn btn-primary\" \n              onClick={() => setUseAI(true)} \n              style={{ marginRight: 12, minWidth: 140, fontSize: '1.08rem', whiteSpace: 'nowrap' }}\n            >\n              Crear con IA\n            </button>\n            <button \n              type=\"button\"\n              className=\"btn btn-secondary\" \n              onClick={() => {\n                setShowManualForm(true);\n                setUseAI(false);\n                setManualStep(0);\n                setManualQuestions([]);\n                // Activando modo manual sin necesidad de log\n              }} \n              style={{ minWidth: 140, fontSize: '1.08rem', whiteSpace: 'nowrap' }}\n            >\n              Escribir preguntas\n            </button>\n          </div>\n        )}\n        {/* Formulario de generación con IA */}\n        {useAI && !showManualForm && (\n          <form className=\"ai-generator-form\" onSubmit={async (e) => {\n            e.preventDefault();\n            setLoading(true);\n            setError('');\n            try {\n              await generateQuestions();\n              setError('');\n            } catch (err) {\n              setError('Error al generar preguntas. Por favor, inténtalo de nuevo.');\n            } finally {\n              setLoading(false);\n            }\n          }}>\n            <div className=\"form-group\">\n              <label htmlFor=\"topic\">Tema</label>\n              <select\n                id=\"topic\"\n                className=\"form-select\"\n                value={selectedTopic}\n                onChange={(e) => setSelectedTopic(e.target.value)}\n                disabled={topics.length === 0}\n              >\n                {topics.length === 0 ? (\n                  <option value=\"\">No hay temas disponibles</option>\n                ) : (\n                  topics.map(topic => (\n                    <option key={topic} value={topic}>{topic}</option>\n                  ))\n                )}\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"difficulty\">Dificultad</label>\n              <select\n                id=\"difficulty\"\n                className=\"form-select\"\n                value={selectedDifficulty}\n                onChange={(e) => setSelectedDifficulty(e.target.value)}\n              >\n                <option value=\"easy\">Fácil</option>\n                <option value=\"medium\">Media</option>\n                <option value=\"hard\">Difícil</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"numQuestions\">Cantidad de Preguntas</label>\n              <input\n                type=\"number\"\n                id=\"numQuestions\"\n                className=\"form-input\"\n                value={questionCount}\n                onChange={(e) => setQuestionCount(Math.min(Math.max(1, parseInt(e.target.value) || 1), 20))}\n                min=\"1\"\n                max=\"20\"\n                required\n              />\n            </div>\n            {error && <div className=\"error-message\">{error}</div>}\n            <div className=\"ai-generator-actions\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={loading}\n                style={{ minWidth: 140, fontSize: '1.08rem', whiteSpace: 'nowrap' }}\n              >\n                {loading ? (\n                  <>\n                    <div className=\"loading-indicator\"></div>\n                    <span>Creando...</span>\n                  </>\n                ) : 'Crear preguntas'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={() => setUseAI(false)}\n                disabled={loading}\n                style={{ marginLeft: 8, minWidth: 100, fontSize: '1.08rem', whiteSpace: 'nowrap' }}\n              >\n                Atrás\n              </button>\n            </div>\n          </form>\n        )}\n        {/* Formulario manual */}\n        {showManualForm && (\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: 380, padding: '32px 0 12px 0', animation: 'fadeIn .5s' }}>\n            {manualStep === 0 ? (\n              <form\n                className=\"manual-question-form\"\n                style={{ maxWidth: 420, margin: '0 auto', marginBottom: 24, boxShadow: '0 8px 32px rgba(42,122,228,0.13)', background: 'rgba(26,26,46,0.97)', borderRadius: 24, padding: '36px 32px 28px 32px', border: '2.5px solid var(--bb-primary)', backdropFilter: 'blur(14px) saturate(1.2)' }}\n                onSubmit={e => { e.preventDefault(); setManualStep(1); setManualQuestions([]); setManualTopic(selectedTopic); }}\n              >\n                <h3 style={{ textAlign: 'center', marginBottom: 24, fontWeight: 900, fontSize: '1.35rem', letterSpacing: 1.2, color: 'var(--bb-primary)', background: 'var(--bb-gradient-primary)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent', backgroundClip: 'text' }}>\n                  ¿Cuántas preguntas quieres agregar manualmente?\n                </h3>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 22 }}>\n                  <label style={{ fontSize: '1.08rem', fontWeight: 600 }}>\n                    Tema:\n                    <select\n                      value={selectedTopic}\n                      onChange={e => setSelectedTopic(e.target.value)}\n                      style={{ marginLeft: 8, minWidth: 120, padding: '10px 16px', borderRadius: 10, fontSize: '1.08rem', border: '2px solid var(--bb-primary-light)', background: 'rgba(22,33,62,0.7)', color: 'var(--bb-text-primary)' }}\n                    >\n                      {topics.map(t => <option key={t} value={t}>{t}</option>)}\n                    </select>\n                  </label>\n                  <label style={{ fontSize: '1.08rem', fontWeight: 600 }}>\n                    ¿Cuántas preguntas?\n                    <input\n                      type=\"number\"\n                      value={manualCount}\n                      onChange={e => setManualCount(Math.min(Math.max(1, parseInt(e.target.value) || 1), 20))}\n                      style={{ marginLeft: 8, width: 80, padding: '10px 16px', borderRadius: 10, fontSize: '1.08rem', border: '2px solid var(--bb-primary-light)', background: 'rgba(22,33,62,0.7)', color: 'var(--bb-text-primary)' }}\n                      min=\"1\"\n                      max=\"20\"\n                      required\n                    />\n                  </label>\n                  <div style={{ display: 'flex', justifyContent: 'center', gap: 18, marginTop: 10 }}>\n                    <button type=\"submit\" className=\"btn btn-primary\" style={{ minWidth: 120, fontSize: '1.08rem' }}>Empezar</button>\n                    <button type=\"button\" className=\"btn btn-secondary\" style={{ minWidth: 120, fontSize: '1.08rem' }} onClick={() => setShowManualForm(false)}>Volver</button>\n                  </div>\n                </div>\n              </form>\n            ) : (\n              <div style={{ width: '100%', maxWidth: 650, margin: '0 auto', background: 'rgba(26,26,46,0.97)', borderRadius: 28, boxShadow: '0 8px 32px rgba(42,122,228,0.13)', border: '2.5px solid var(--bb-primary)', padding: '36px 32px 28px 32px', backdropFilter: 'blur(14px) saturate(1.2)', animation: 'fadeIn .5s' }}>\n                <div style={{ textAlign: 'center', marginBottom: 18, fontWeight: 900, fontSize: '1.25rem', letterSpacing: 1.1, color: 'var(--bb-primary)', background: 'var(--bb-gradient-primary)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent', backgroundClip: 'text' }}>\n                  ¡Vamos! Pregunta {manualQuestions.length + 1} de {manualCount}\n                </div>\n                                <ManualQuestionForm\n                  topics={[manualTopic]}\n                  onQuestionCreated={async (q) => {\n                    try {\n                      setLoading(true);\n                      setError('');\n                      \n                      const next = [...manualQuestions, { ...q, category: manualTopic }];\n                      \n                      // Si es la última pregunta\n                      if (next.length === manualCount) {\n                        const apiBase = import.meta.env.VITE_API_URL;\n                        if (!apiBase) {\n                          setError('Error de configuración: URL del API no definida');\n                          return;\n                        }\n                        const token = await user.getIdToken();\n                        \n                        const response = await fetch(`${apiBase}/api/questions/bulk`, {\n                          method: 'POST',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${token}`\n                          },\n                          body: JSON.stringify({ questions: next })\n                        });\n\n                        const data = await response.json();\n\n                        if (!response.ok) {\n                          throw new Error(data.error || 'Error al guardar las preguntas');\n                        }\n\n                        // Notificar al componente padre\n                        if (onQuestionsGenerated) {\n                          onQuestionsGenerated(next);\n                        }\n\n                        // Mostrar mensaje de éxito y cerrar\n                        setError('¡Todas las preguntas han sido guardadas exitosamente!');\n                        setTimeout(() => {\n                          setShowManualForm(false);\n                          setError('');\n                        }, 1500);\n                      } else {\n                        // Si no es la última pregunta, actualizar el contador y continuar\n                        setManualQuestions(next);\n                        setManualStep(manualStep + 1);\n                        // Mostrar mensaje de progreso\n                        setError(`¡Pregunta ${next.length} de ${manualCount} guardada exitosamente!`);\n                        setTimeout(() => setError(''), 1500);\n                      }\n                    } catch (error) {\n                      setError('No se pudo guardar la pregunta: ' + (error.message || 'Por favor, intenta de nuevo.'));\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                  onCancel={() => {\n                    setShowManualForm(false);\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default AIQuestionGenerator;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/Footer.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-transparent border-white/5 border-t w-full\">\n      <div className=\"flex md:flex-row flex-col justify-between items-center gap-4 mx-auto px-4 py-6 container\">\n        <div className=\"text-sm\">© {new Date().getFullYear()} BrainBlitz</div>\n        <div className=\"flex gap-4 text-sm\">\n          <a href=\"/\" className=\"hover:underline\">Privacidad</a>\n          <a href=\"/\" className=\"hover:underline\">Términos</a>\n        </div>\n      </div>\n    </footer>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/Layout.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react/prop-types","severity":2,"message":"'children' is missing in props validation","line":5,"column":34,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport Navbar from './Navbar'\nimport Footer from './Footer'\n\nexport default function Layout({ children }) {\n  return (\n    <div className=\"flex flex-col bg-bb-bg-primary min-h-screen text-white\">\n      <Navbar />\n      <main className=\"flex-1 mx-auto px-4 py-6 w-full container\">{children}</main>\n      <Footer />\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/ManualQuestionForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react/prop-types","severity":2,"message":"'topics' is missing in props validation","line":6,"column":31,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":37},{"ruleId":"react/prop-types","severity":2,"message":"'onQuestionCreated' is missing in props validation","line":6,"column":39,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":56},{"ruleId":"react/prop-types","severity":2,"message":"'onCancel' is missing in props validation","line":6,"column":58,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":66},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'validateForm'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [formData, user, validateForm]","fix":{"range":[1176,1192],"text":"[formData, user, validateForm]"}}]},{"ruleId":"react/prop-types","severity":2,"message":"'topics.map' is missing in props validation","line":110,"column":21,"nodeType":"Identifier","messageId":"missingPropType","endLine":110,"endColumn":24}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../AuthContext';\nimport './ManualQuestionForm.css';\nimport './common.css';\n\nconst ManualQuestionForm = ({ topics, onQuestionCreated, onCancel }) => {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    question: '',\n    options: ['', '', '', ''],\n    correctIndex: 0,\n    selectedTopic: topics[0] || ''\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleOptionChange = (idx, value) => {\n    setFormData(prev => ({\n      ...prev,\n      options: prev.options.map((opt, i) => i === idx ? value : opt)\n    }));\n  };\n\n  const validateForm = () => {\n    if (!formData.question.trim()) {\n      return 'La pregunta es requerida';\n    }\n    if (formData.options.some(opt => !opt.trim())) {\n      return 'Todas las opciones son requeridas';\n    }\n    if (!user?.getIdToken) {\n      return 'Debes iniciar sesión para crear preguntas';\n    }\n    return '';\n  };\n\n  useEffect(() => {\n    const validationError = validateForm();\n    setError(validationError);\n  }, [formData, user]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const validationError = validateForm();\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setSuccessMessage('');\n\n    try {\n      const apiBase = import.meta.env.VITE_API_URL || 'http://localhost:5000';\n      const token = await user.getIdToken();\n\n      const payload = {\n        text: formData.question,\n        options: formData.options,\n        correctAnswerIndex: formData.correctIndex,\n        category: formData.selectedTopic,\n        explanation: ''\n      };\n\n      const response = await fetch(`${apiBase}/api/questions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(payload)\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al guardar la pregunta');\n      }\n\n      setSuccessMessage('¡Pregunta guardada correctamente!');\n      \n      if (onQuestionCreated) {\n        onQuestionCreated(data.question || { ...payload });\n      }\n    } catch (err) {\n      console.error('Error al guardar la pregunta:', err);\n      setError(err.message || 'Error de conexión');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form className=\"manual-question-form\" onSubmit={handleSubmit}>\n      <h3>Escribe tu pregunta</h3>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      {successMessage && <div className=\"success-message\">{successMessage}</div>}\n      \n      <div className={`form-group ${loading ? 'disabled' : ''}`}>\n        <label>\n          Tema:\n          <select \n            value={formData.selectedTopic} \n            onChange={e => setFormData(prev => ({ ...prev, selectedTopic: e.target.value }))}\n            disabled={loading}\n          >\n            {topics.map(t => <option key={t} value={t}>{t}</option>)}\n          </select>\n        </label>\n      </div>\n\n      <div className={`form-group ${loading ? 'disabled' : ''}`}>\n        <label>\n          Pregunta:\n          <input\n            type=\"text\"\n            value={formData.question}\n            onChange={e => setFormData(prev => ({ ...prev, question: e.target.value }))}\n            disabled={loading}\n            required\n          />\n        </label>\n      </div>\n\n      <div className={`form-group ${loading ? 'disabled' : ''}`}>\n        <label>Opciones:</label>\n        <div className=\"manual-options-list\">\n          {formData.options.map((opt, idx) => (\n            <div key={idx} className=\"manual-option-row\">\n              <input\n                type=\"text\"\n                value={opt}\n                onChange={e => handleOptionChange(idx, e.target.value)}\n                disabled={loading}\n                required\n                placeholder={`Opción ${idx + 1}`}\n              />\n              <label className=\"radio-label\">\n                <input\n                  type=\"radio\"\n                  name=\"correctOption\"\n                  checked={formData.correctIndex === idx}\n                  onChange={() => setFormData(prev => ({ ...prev, correctIndex: idx }))}\n                  disabled={loading}\n                />\n                <span>Correcta</span>\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"manual-question-actions\">\n        <button \n          type=\"submit\" \n          className=\"btn btn-primary\" \n          disabled={loading || !!error}\n        >\n          {loading ? (\n            <>\n              <div className=\"loading-indicator\" />\n              <span style={{ marginLeft: '8px' }}>Guardando...</span>\n            </>\n          ) : 'Guardar'}\n        </button>\n        <button \n          type=\"button\" \n          className=\"btn btn-secondary\" \n          onClick={onCancel} \n          disabled={loading}\n        >\n          Atrás\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ManualQuestionForm;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/Navbar.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react/prop-types","severity":2,"message":"'open' is missing in props validation","line":4,"column":21,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction MenuIcon({ open }) {\n  return (\n    <div className=\"relative w-6 h-6\">\n      <span className={`block h-0.5 w-6 bg-white transition-transform ${open ? 'rotate-45 translate-y-2' : ''}`}></span>\n      <span className={`block h-0.5 w-6 bg-white my-1 transition-opacity ${open ? 'opacity-0' : 'opacity-100'}`}></span>\n      <span className={`block h-0.5 w-6 bg-white transition-transform ${open ? '-rotate-45 -translate-y-2' : ''}`}></span>\n    </div>\n  )\n}\n\nexport default function Navbar() {\n  const [open, setOpen] = useState(false)\n\n  return (\n    <header className=\"bg-transparent backdrop-blur-md border-white/10 border-b w-full\">\n      <div className=\"flex justify-between items-center mx-auto px-4 py-3 container\">\n        <Link to=\"/\" className=\"flex items-center gap-3\">\n          <div className=\"flex justify-center items-center bg-gradient-to-br from-bb-primary to-bb-accent rounded-md w-10 h-10 font-bold text-xl\">⚡</div>\n          <span className=\"font-bold text-lg\">BrainBlitz</span>\n        </Link>\n\n        <nav className=\"hidden md:flex items-center gap-4\">\n          <Link to=\"/\" className=\"text-sm hover:underline\">Inicio</Link>\n          <Link to=\"/dashboard\" className=\"text-sm hover:underline\">Panel</Link>\n          <Link to=\"/ranking\" className=\"text-sm hover:underline\">Ranking</Link>\n          <Link to=\"/login\" className=\"bg-bb-primary px-3 py-2 rounded-md text-sm\">Iniciar</Link>\n        </nav>\n\n        <button\n          aria-label=\"Abrir menú\"\n          className=\"md:hidden p-2 rounded-md\"\n          onClick={() => setOpen((v) => !v)}\n        >\n          <MenuIcon open={open} />\n        </button>\n      </div>\n\n      {/* Mobile drawer */}\n      <div className={`md:hidden bg-bb-bg-primary/95 border-t border-white/5 transition-max-h duration-300 overflow-hidden ${open ? 'max-h-60' : 'max-h-0'}`}>\n        <div className=\"flex flex-col gap-3 px-4 py-4\">\n          <Link to=\"/\" className=\"px-3 py-2 rounded-md\">Inicio</Link>\n          <Link to=\"/dashboard\" className=\"px-3 py-2 rounded-md\">Panel</Link>\n          <Link to=\"/ranking\" className=\"px-3 py-2 rounded-md\">Ranking</Link>\n          <Link to=\"/login\" className=\"bg-bb-primary px-3 py-2 rounded-md text-white\">Iniciar</Link>\n        </div>\n      </div>\n    </header>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/ProtectedRoute.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react/prop-types","severity":2,"message":"'children' is missing in props validation","line":5,"column":42,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":50},{"ruleId":"react/prop-types","severity":2,"message":"'adminOnly' is missing in props validation","line":5,"column":52,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":61}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../AuthContext';\n\nexport default function ProtectedRoute({ children, adminOnly }) {\n  const { user, loading } = useAuth();\n\n  if (loading) return null;\n  if (!user) return <Navigate to=\"/login\" replace />;\n  if (adminOnly && user.email !== 'admin@example.com') return <Navigate to=\"/dashboard\" replace />;\n  return children;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/Question.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react/prop-types","severity":2,"message":"'question' is missing in props validation","line":4,"column":36,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":44},{"ruleId":"react/prop-types","severity":2,"message":"'options' is missing in props validation","line":4,"column":46,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":53},{"ruleId":"react/prop-types","severity":2,"message":"'onSelect' is missing in props validation","line":4,"column":55,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":63},{"ruleId":"react/prop-types","severity":2,"message":"'selected' is missing in props validation","line":4,"column":65,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":73},{"ruleId":"react/prop-types","severity":2,"message":"'options.map' is missing in props validation","line":9,"column":18,"nodeType":"Identifier","messageId":"missingPropType","endLine":9,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport './AIQuestionGenerator.css';\n\nexport default function Question({ question, options, onSelect, selected }) {\n  return (\n    <div className=\"question-card\">\n      <h2 className=\"question-title\">{question}</h2>\n      <div className=\"options-list\">\n        {options.map((opt, idx) => (\n          <button\n            key={idx}\n            className={`option-btn${selected === idx ? ' selected' : ''}`}\n            onClick={() => onSelect(idx)}\n            disabled={selected !== null}\n          >\n            <span className=\"option-label\">{String.fromCharCode(65 + idx)})</span> {opt}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/Ranking.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react/prop-types","severity":2,"message":"'players' is missing in props validation","line":4,"column":35,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport './Ranking.css';\n\nexport default function Ranking({ players }) {\n  const sortedPlayers = [...players].sort((a, b) => b.score - a.score);\n\n  const getRankIcon = (index) => {\n    switch (index) {\n      case 0: return '🥇';\n      case 1: return '🥈';\n      case 2: return '🥉';\n      default: return `#${index + 1}`;\n    }\n  };\n\n  const getRankClass = (index) => {\n    switch (index) {\n      case 0: return 'first';\n      case 1: return 'second';\n      case 2: return 'third';\n      default: return '';\n    }\n  };\n\n  return (\n    <div className=\"mx-auto w-full max-w-xl\">\n      <h3 className=\"mb-4 font-bold text-xl\">🏆 Tabla de posiciones</h3>\n      <div className=\"flex flex-col bg-white/3 rounded-md divide-y divide-white/5 overflow-hidden\">\n        {sortedPlayers.map((player, index) => (\n          <div key={player.uid} className={`flex items-center gap-4 p-3 ${getRankClass(index)}`}>\n            <div className=\"flex justify-center items-center bg-white/5 rounded-full w-10 h-10 text-lg\">{getRankIcon(index)}</div>\n            <div className=\"flex-1\">\n              <div className=\"font-medium\">{player.displayName || player.email}</div>\n              <div className=\"text-white/80 text-sm\">{player.score} puntos</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/components/Timer.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react/prop-types","severity":2,"message":"'seconds' is missing in props validation","line":4,"column":33,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":45},{"ruleId":"react/prop-types","severity":2,"message":"'onEnd' is missing in props validation","line":4,"column":47,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":52},{"ruleId":"react/prop-types","severity":2,"message":"'onTick' is missing in props validation","line":4,"column":54,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":60}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\nimport './Timer.css';\n\nexport default function Timer({ seconds = 20, onEnd, onTick }) {\n  const [time, setTime] = useState(seconds);\n  const intervalRef = useRef();\n\n  useEffect(() => {\n    setTime(seconds);\n  }, [seconds]);\n\n  useEffect(() => {\n    if (time === 0) {\n      if (onEnd) onEnd();\n      return;\n    }\n    intervalRef.current = setInterval(() => {\n      setTime(t => t - 1);\n    }, 1000);\n    return () => clearInterval(intervalRef.current);\n  }, [time, onEnd]);\n\n  useEffect(() => {\n    if (onTick) onTick(time);\n  }, [time, onTick]);\n\n  const getTimerColor = () => {\n    if (time <= 3) return 'critical';\n    if (time <= 6) return 'warning';\n    return 'normal';\n  };\n\n  return (\n    <div className={`timer ${getTimerColor()}`}>\n      <div className=\"timer-circle\">\n        <span className=\"timer-text\">{time}</span>\n      </div>\n      <span className=\"timer-label\">segundos restantes</span>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/AdminPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport mockDb from '../services/mockDb';\n\nconst emptyForm = {\n  text: '',\n  options: ['', '', '', ''],\n  correctAnswerIndex: 0,\n  category: '',\n  explanation: ''\n};\n\nexport default function AdminPage() {\n  const [questions, setQuestions] = useState([]);\n  const [form, setForm] = useState(emptyForm);\n  const [editingId, setEditingId] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchQuestions = async () => {\n    setLoading(true);\n    const snap = await mockDb.collection('questions').get();\n    setQuestions(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n    setLoading(false);\n  };\n\n  useEffect(() => { fetchQuestions(); }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setForm(f => ({ ...f, [name]: value }));\n  };\n  const handleOptionChange = (idx, value) => {\n    setForm(f => {\n      const options = [...f.options];\n      options[idx] = value;\n      return { ...f, options };\n    });\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (editingId) {\n      await mockDb.collection('questions').doc(editingId).update(form);\n    } else {\n      await mockDb.collection('questions').add(form);\n    }\n    setForm(emptyForm);\n    setEditingId(null);\n    fetchQuestions();\n  };\n  const handleEdit = (q) => {\n    setForm(q);\n    setEditingId(q.id);\n  };\n  const handleDelete = async (id) => {\n    await mockDb.collection('questions').doc(id).delete();\n    fetchQuestions();\n  };\n\n  return (\n    <div>\n      <h2>Admin Panel</h2>\n      <form onSubmit={handleSubmit}>\n        <input name=\"text\" value={form.text} onChange={handleChange} placeholder=\"Question text\" required />\n        <input name=\"category\" value={form.category} onChange={handleChange} placeholder=\"Category\" required />\n        <input name=\"explanation\" value={form.explanation} onChange={handleChange} placeholder=\"Explanation\" required />\n        {form.options.map((opt, idx) => (\n          <div key={idx}>\n            <input\n              value={opt}\n              onChange={e => handleOptionChange(idx, e.target.value)}\n              placeholder={`Option ${idx + 1}`}\n              required\n            />\n            <input\n              type=\"radio\"\n              name=\"correctAnswerIndex\"\n              checked={form.correctAnswerIndex === idx}\n              onChange={() => setForm(f => ({ ...f, correctAnswerIndex: idx }))}\n            /> Correct\n          </div>\n        ))}\n        <button type=\"submit\">{editingId ? 'Update' : 'Add'} Question</button>\n        {editingId && <button type=\"button\" onClick={() => { setForm(emptyForm); setEditingId(null); }}>Cancel</button>}\n      </form>\n      <hr />\n      <h3>Questions</h3>\n      {loading ? <p>Loading...</p> : (\n        <table border=\"1\">\n          <thead>\n            <tr>\n              <th>Text</th>\n              <th>Category</th>\n              <th>Options</th>\n              <th>Correct</th>\n              <th>Explanation</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {questions.map(q => (\n              <tr key={q.id}>\n                <td>{q.text}</td>\n                <td>{q.category}</td>\n                <td>{q.options.join(', ')}</td>\n                <td>{q.options[q.correctAnswerIndex]}</td>\n                <td>{q.explanation}</td>\n                <td>\n                  <button onClick={() => handleEdit(q)}>Edit</button>\n                  <button onClick={() => handleDelete(q.id)}>Delete</button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/CompleteProfilePage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { auth, db } from '../services/firebase';\nimport { updateProfile } from 'firebase/auth';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function CompleteProfilePage() {\n  const [displayName, setDisplayName] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleSave = async (e) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n    try {\n      if (!auth.currentUser) throw new Error('No autenticado');\n      await updateProfile(auth.currentUser, { displayName });\n      await setDoc(doc(db, 'users', auth.currentUser.uid), {\n        email: auth.currentUser.email,\n        displayName,\n        stats: { gamesPlayed: 0, wins: 0, correctAnswers: 0 }\n      }, { merge: true });\n      navigate('/dashboard');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-page\">\n      <div className=\"auth-container\">\n        <div className=\"auth-header\">\n          <h1>Completa tu perfil</h1>\n          <p>Elige tu nombre para mostrar</p>\n        </div>\n        <form onSubmit={handleSave} className=\"auth-form\">\n          <div className=\"input-group\">\n            <input\n              type=\"text\"\n              placeholder=\"Nombre para mostrar\"\n              value={displayName}\n              onChange={e => setDisplayName(e.target.value)}\n              required\n              disabled={loading}\n            />\n          </div>\n          {error && <div className=\"error-message\">{error}</div>}\n          <button type=\"submit\" className=\"btn btn-primary btn-large\" disabled={loading}>\n            {loading ? 'Guardando...' : 'Guardar'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/DashboardPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/GameLobbyPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'setStatus' is assigned a value but never used.","line":12,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":107,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":42}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../AuthContext';\nimport { getSocket, disconnectSocket } from '../services/socket';\nimport './GameLobbyPage.css';\n\nexport default function GameLobbyPage() {\n  const { gameId } = useParams();\n  const { user } = useAuth();\n  const [players, setPlayers] = useState([]);\n  const [hostId, setHostId] = useState(null);\n  const [status, setStatus] = useState('waiting');\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!user) return;\n    \n    (async () => {\n      if (!user) return;\n      const socket = await getSocket();\n      socket.connect();\n      socket.emit('joinGame', { \n        gameId, \n        uid: user.uid, \n        displayName: user.displayName || user.email \n      });\n\n      socket.on('playerJoined', ({ players }) => {\n        setPlayers(players);\n        if (players.length > 0) setHostId(players[0].uid);\n      });\n      \n      socket.on('gameStarted', () => {\n        console.log('[GameLobbyPage] Evento gameStarted recibido, navegando a /game/' + gameId);\n        navigate(`/game/${gameId}`);\n      });\n      \n      socket.on('error', ({ error }) => {\n        setError(error);\n      });\n\n      // cleanup\n      return () => {\n        socket.off('playerJoined');\n        socket.off('gameStarted');\n        socket.off('error');\n        disconnectSocket();\n      };\n    })();\n  }, [gameId, user, navigate]);\n\n  const handleStart = () => {\n    console.log('[GameLobbyPage] Emitiendo startGame:', { gameId });\n    (async () => {\n      const socket = await getSocket();\n      socket.emit('startGame', { gameId });\n    })();\n  };\n\n  const copyGameCode = () => {\n    navigator.clipboard.writeText(gameId);\n    alert('Game code copied to clipboard!');\n  };\n\n  if (error) {\n    return (\n      <div className=\"lobby-page error-page\">\n        <div className=\"lobby-overlay\" />\n        <div className=\"error-container\">\n          <h2>❌ Error</h2>\n          <p>{\n            error === 'Game already started'\n              ? 'La partida ya ha comenzado. No puedes unirte en este momento.'\n              : error\n          }</p>\n          <button onClick={() => navigate('/dashboard')} className=\"btn btn-primary\">\n            Volver al inicio\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"lobby-page\">\n      <div className=\"lobby-overlay\" />\n      <div className=\"lobby-container\">\n        <header className=\"lobby-header\">\n          <h1>🎮 Sala de Juego</h1>\n          <div className=\"game-code-section\">\n            <h3>Código de la partida</h3>\n            <div className=\"game-code-display\">\n              <span className=\"game-code\">{gameId}</span>\n              <button onClick={copyGameCode} className=\"copy-btn\">\n                📋 Copiar\n              </button>\n            </div>\n            <p className=\"share-text\">¡Comparte este código con tus amigos para que se unan!</p>\n          </div>\n        </header>\n\n        <main className=\"lobby-main\">\n          <div className=\"players-section\">\n            <h3>👥 Jugadores ({players.length})</h3>\n            <div className=\"players-list\">\n              {players.map((player, index) => (\n                <div key={player.uid} className={`player-card${player.uid === hostId ? ' host' : ''}`}> {/* Espaciado fijo */}\n                  <div className=\"player-avatar\">\n                    {player.uid === hostId ? '👑' : '👤'}\n                  </div>\n                  <div className=\"player-info\">\n                    <span className=\"player-name\">\n                      {player.displayName || player.email}\n                    </span>\n                    {player.uid === hostId && (\n                      <span className=\"host-badge\">Anfitrión</span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"game-controls\">\n            {user && user.uid === hostId && status === 'waiting' ? (\n              <div className=\"host-controls\">\n                <p>¿Listo para comenzar la partida?</p>\n                <button \n                  onClick={handleStart} \n                  className=\"btn btn-primary btn-large\"\n                  disabled={players.length < 1}\n                >\n                  🚀 Iniciar partida\n                </button>\n                {players.length < 1 && (\n                  <p className=\"waiting-text\">Esperando a que se unan jugadores...</p>\n                )}\n              </div>\n            ) : (\n              <div className=\"waiting-controls\">\n                <p>⏳ Esperando a que el anfitrión inicie la partida...</p>\n                <div className=\"loading-dots\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/GamePage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'timeLeft' is assigned a value but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'timeout' is assigned a value but never used.","line":37,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'onConnect' is not defined.","line":95,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":95,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'onNewQuestion' is not defined.","line":96,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":96,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'onAnswerResult' is not defined.","line":97,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'onGameFinished' is not defined.","line":98,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'onGameStarted' is not defined.","line":99,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":48},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'question'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [user, gameId, navigate, question]","fix":{"range":[3837,3861],"text":"[user, gameId, navigate, question]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'question'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [selected, question, gameId, user.uid]","fix":{"range":[4328,4352],"text":"[selected, question, gameId, user.uid]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getOptionColor' is assigned a value but never used.","line":124,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":23}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../AuthContext';\nimport { getSocket } from '../services/socket';\nimport Question from '../components/Question';\nimport Timer from '../components/Timer';\nimport Ranking from '../components/Ranking';\nimport './GamePage.css';\n\nexport default function GamePage() {\n  const [questionTimeout, setQuestionTimeout] = useState(false);\n  const { gameId } = useParams();\n  const { user } = useAuth();\n  const [question, setQuestion] = useState(null);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n  const [selected, setSelected] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState(null);\n  const [timerKey, setTimerKey] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    (async () => {\n      const socket = await getSocket();\n      // Solicitar la primera pregunta al conectar\n      if (user && gameId) {\n        socket.emit('requestQuestion', { gameId });\n        console.log('[GamePage] Emitiendo requestQuestion:', { gameId });\n      }\n\n      // Si no llega pregunta en 5 segundos, mostrar error\n    })();\n    // Si no llega pregunta en 5 segundos, mostrar error\n    const timeout = setTimeout(() => {\n      if (!question) setQuestionTimeout(true);\n    }, 5000);\n\n    if (!user) return;\n    const setup = async () => {\n      const socket = await getSocket();\n      if (!socket.connected) {\n        console.log('[GamePage] Intentando conectar socket...');\n        socket.connect();\n      }\n    // Listeners nombrados para evitar duplicados\n    function onConnect() {\n      console.log('[GamePage] Socket conectado:', socket.id);\n    }\n    function onNewQuestion({ question, index }) {\n      console.log('[GamePage] Evento newQuestion recibido:', question);\n        // Asegurarse de que las opciones no se barajen ni modifiquen\n        // y que el índice de la respuesta correcta corresponda al array recibido\n        if (!Array.isArray(question.options)) {\n          question.options = [];\n        }\n        setQuestion({\n          ...question,\n          options: [...question.options], // Copia directa, sin barajar\n        });\n        setQuestionIndex(index);\n        setSelected(null);\n        setShowResult(false);\n        setTimeLeft(10);\n        setTimerKey(prev => prev + 1);\n    }\n    function onAnswerResult({ correctAnswerIndex, explanation, players }) {\n      console.log('[GamePage] Evento answerResult recibido:', { correctAnswerIndex, explanation, players });\n      setShowResult(true);\n      setResult({ correctAnswerIndex, explanation });\n      setPlayers(players);\n    }\n    function onGameFinished({ players }) {\n      console.log('[GamePage] Evento gameFinished recibido:', players);\n      navigate(`/summary/${gameId}`, { state: { players } });\n    }\n    function onGameStarted({ questionsCount }) {\n      console.log('[GamePage] Evento gameStarted recibido:', questionsCount);\n      setTotalQuestions(questionsCount);\n    }\n\n      socket.on('connect', onConnect);\n      socket.on('newQuestion', onNewQuestion);\n      socket.on('answerResult', onAnswerResult);\n      socket.on('gameFinished', onGameFinished);\n      socket.on('gameStarted', onGameStarted);\n    };\n    setup();\n\n    return () => {\n      (async () => {\n        const socket = await getSocket();\n        socket.off('connect', onConnect);\n        socket.off('newQuestion', onNewQuestion);\n        socket.off('answerResult', onAnswerResult);\n        socket.off('gameFinished', onGameFinished);\n        socket.off('gameStarted', onGameStarted);\n      })();\n    };\n  }, [user, gameId, navigate]);\n\n  const handleSelect = useCallback((idx) => {\n    if (selected !== null) return; // Prevent multiple selections\n    setSelected(idx);\n    // Enviar también el valor de la opción seleccionada\n    const answerValue = question && Array.isArray(question.options) ? question.options[idx] : undefined;\n    (async () => {\n      const socket = await getSocket();\n      socket.emit('submitAnswer', { gameId, uid: user.uid, answerIndex: idx, answerValue });\n    })();\n  }, [gameId, user, selected]);\n\n  const handleTimerEnd = useCallback(() => {\n    if (selected === null) {\n      (async () => {\n        const socket = await getSocket();\n        socket.emit('submitAnswer', { gameId, uid: user.uid, answerIndex: null, answerValue: null });\n      })();\n    }\n  }, [gameId, user, selected]);\n\n  const getOptionColor = (index) => {\n    if (!showResult) {\n      return selected === index ? 'selected' : '';\n    }\n    \n    if (index === result.correctAnswerIndex) {\n      return 'correct';\n    }\n    \n    if (selected === index && index !== result.correctAnswerIndex) {\n      return 'incorrect';\n    }\n    \n    return '';\n  };\n\n  const getPlayerRank = () => {\n    const sortedPlayers = [...players].sort((a, b) => b.score - a.score);\n    const playerIndex = sortedPlayers.findIndex(p => p.uid === user.uid);\n    return playerIndex + 1;\n  };\n\n  return (\n    <div className=\"game-page\">\n      <header className=\"game-header\">\n        <div className=\"game-info\">\n          <h2>🎯 Juego de Preguntas</h2>\n          <div className=\"progress-info\">\n            <span className=\"question-counter\">\n              Pregunta {questionIndex + 1} de {totalQuestions || '?'}\n            </span>\n            <div className=\"progress-bar\">\n              <div \n                className=\"progress-fill\" \n                style={{ width: `${((questionIndex + 1) / (totalQuestions || 1)) * 100}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"player-rank\">\n          <span className=\"rank-number\">#{getPlayerRank()}</span>\n          <span className=\"rank-label\">Tu posición</span>\n        </div>\n      </header>\n\n      <main className=\"game-main\">\n        {question && (\n          <div className=\"question-container\">\n            <div className=\"question-header\">\n              <Question\n                question={question.question}\n                options={question.options}\n                onSelect={handleSelect}\n                selected={selected}\n              />\n              {!showResult && (\n                <Timer\n                  key={timerKey}\n                  seconds={10}\n                  onEnd={handleTimerEnd}\n                  onTick={setTimeLeft}\n                />\n              )}\n            </div>\n            {showResult && result && (\n              <div className=\"result-container\">\n                <div className=\"result-header\">\n                  <h4>✅ ¡Respuesta revelada!</h4>\n                </div>\n                <div className=\"correct-answer\">\n                  <strong>Respuesta correcta:</strong> {question.options[result.correctAnswerIndex]}\n                </div>\n                {result.explanation && (\n                  <div className=\"explanation\">\n                    <strong>Explicación:</strong> {result.explanation}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {!question && !questionTimeout && (\n          <div className=\"waiting-container\">\n            <div className=\"loading-spinner\"></div>\n            <p>Esperando la siguiente pregunta...</p>\n          </div>\n        )}\n        {!question && questionTimeout && (\n          <div className=\"waiting-container\">\n            <div className=\"loading-spinner\"></div>\n            <p style={{color: 'red', fontWeight: 'bold'}}>No se encontraron preguntas para este tema. Verifica que hayas generado preguntas y que el tema coincida exactamente.</p>\n          </div>\n        )}\n      </main>\n\n      <aside className=\"game-sidebar\">\n        <Ranking players={players} />\n      </aside>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/GameSummaryPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Ranking from '../components/Ranking';\nimport './GameSummaryPage.css';\n\nexport default function GameSummaryPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const players = location.state?.players || [];\n\n  return (\n    <div className=\"game-summary-container\">\n      <div className=\"game-summary-card\">\n        <h2 className=\"game-summary-title\">¡Juego finalizado!</h2>\n        <div className=\"game-summary-subtitle\">\n          <span>¡Felicidades a todos los participantes!</span>\n        </div>\n        <Ranking players={players} />\n        <button\n          className=\"btn\"\n          style={{ marginTop: '1.5rem', minWidth: 180 }}\n          onClick={() => navigate('/dashboard')}\n        >\n          Volver al Panel Principal\n        </button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/HomePage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../AuthContext';\nimport Layout from '../components/Layout';\nimport './HomePage.css';\n\nexport default function HomePage() {\n  const { user } = useAuth();\n\n  return (\n    <Layout>\n      <section className=\"mx-auto py-8 max-w-4xl text-center\">\n        <h1 className=\"mb-3 font-extrabold text-3xl md:text-5xl\">⚡ BrainBlitz</h1>\n        <p className=\"mb-6 text-white/80 text-sm md:text-lg\">La experiencia definitiva de trivia multijugador</p>\n\n        <div className=\"flex sm:flex-row flex-col justify-center items-center gap-3\">\n          {user ? (\n            <>\n              <Link to=\"/dashboard\" className=\"bg-bb-primary px-5 py-3 rounded-md font-semibold text-sm\">Ir al panel</Link>\n              <Link to=\"/profile\" className=\"bg-white/5 px-5 py-3 rounded-md text-sm\">Ver perfil</Link>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\" className=\"bg-bb-primary px-5 py-3 rounded-md font-semibold text-sm\">Iniciar sesión</Link>\n              <Link to=\"/register\" className=\"bg-white/5 px-5 py-3 rounded-md text-sm\">Registrarse</Link>\n            </>\n          )}\n        </div>\n      </section>\n\n      <section className=\"mx-auto py-6 max-w-6xl\">\n        <h2 className=\"mb-4 font-bold text-2xl\">Características</h2>\n        <div className=\"gap-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3\">\n          <div className=\"bg-white/3 p-4 rounded-lg\">\n            <div className=\"mb-2 text-3xl\">⚡</div>\n            <h3 className=\"font-semibold\">Juego en tiempo real</h3>\n            <p className=\"text-white/80 text-sm\">Juega con amigos con puntuación instantánea y rankings en vivo</p>\n          </div>\n          <div className=\"bg-white/3 p-4 rounded-lg\">\n            <div className=\"mb-2 text-3xl\">🎮</div>\n            <h3 className=\"font-semibold\">Fácil de unirse</h3>\n            <p className=\"text-white/80 text-sm\">Únete con códigos de 6 dígitos o explora partidas públicas</p>\n          </div>\n          <div className=\"bg-white/3 p-4 rounded-lg\">\n            <div className=\"mb-2 text-3xl\">🏆</div>\n            <h3 className=\"font-semibold\">Competitivo</h3>\n            <p className=\"text-white/80 text-sm\">Sigue tus estadísticas, sube en el ranking y sé el campeón de BrainBlitz</p>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/LoginPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { auth } from '../services/firebase';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { useNavigate, Link } from 'react-router-dom';\nimport './AuthPage.css';\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      navigate('/dashboard');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-page\">\n      <div className=\"auth-container\">\n        <div className=\"auth-header\">\n          <h1>⚡ BrainBlitz</h1>\n          <h2>¡Bienvenido de nuevo!</h2>\n          <p>Inicia sesión para continuar tu aventura de trivia</p>\n        </div>\n\n        <form onSubmit={handleLogin} className=\"auth-form\">\n          <div className=\"input-group\">\n            <input \n              type=\"email\" \n              placeholder=\"Correo electrónico\" \n              value={email} \n              onChange={e => setEmail(e.target.value)} \n              required \n              disabled={loading}\n            />\n          </div>\n          \n          <div className=\"input-group\">\n            <input \n              type=\"password\" \n              placeholder=\"Contraseña\" \n              value={password} \n              onChange={e => setPassword(e.target.value)} \n              required \n              disabled={loading}\n            />\n          </div>\n\n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          <button type=\"submit\" className=\"btn btn-primary btn-large\" disabled={loading}>\n            {loading ? 'Iniciando sesión...' : 'Iniciar sesión'}\n          </button>\n        </form>\n\n        <div className=\"auth-footer\">\n          <p>\n            ¿No tienes cuenta? <Link to=\"/register\">Regístrate aquí</Link>\n          </p>\n          <p>\n            <Link to=\"/reset\">¿Olvidaste tu contraseña?</Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/PasswordResetPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { auth } from '../services/firebase';\nimport { sendPasswordResetEmail } from 'firebase/auth';\nimport { Link } from 'react-router-dom';\nimport './AuthPage.css';\n\nexport default function PasswordResetPage() {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleReset = async (e) => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    setLoading(true);\n    try {\n      await sendPasswordResetEmail(auth, email);\n      setMessage('Password reset email sent! Check your inbox.');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-page\">\n      <div className=\"auth-container\">\n        <div className=\"auth-header\">\n          <h1>⚡ BrainBlitz</h1>\n          <h2>Restablecer contraseña</h2>\n          <p>Ingresa tu correo para recibir un enlace de restablecimiento</p>\n        </div>\n\n        <form onSubmit={handleReset} className=\"auth-form\">\n          <div className=\"input-group\">\n            <input \n              type=\"email\" \n              placeholder=\"Correo electrónico\" \n              value={email} \n              onChange={e => setEmail(e.target.value)} \n              required \n              disabled={loading}\n            />\n          </div>\n\n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          {message && (\n            <div className=\"success-message\">\n              {message}\n            </div>\n          )}\n\n          <button type=\"submit\" className=\"btn btn-primary btn-large\" disabled={loading}>\n            {loading ? 'Enviando...' : 'Enviar correo de restablecimiento'}\n          </button>\n        </form>\n\n        <div className=\"auth-footer\">\n          <p>\n            <Link to=\"/login\">Volver al inicio de sesión</Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/ProfilePage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useAuth } from '../AuthContext';\nimport './ProfilePage.css';\n\nexport default function ProfilePage() {\n  const { user } = useAuth();\n  const [stats, setStats] = useState(null);\n  const [apiError, setApiError] = useState('');\n  const [apiRaw, setApiRaw] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchProfile() {\n      if (!user) return;\n      let statsData = null;\n      try {\n  const apiBase = import.meta.env.VITE_API_URL;\n        // Obtener el token de Firebase\n        const token = user && (await user.getIdToken());\n        const statsRes = await fetch(`${apiBase}/api/users/me/stats?uid=${user.uid}`,\n          {\n            headers: {\n              'Authorization': token ? `Bearer ${token}` : '',\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n        if (statsRes.ok) {\n          statsData = await statsRes.json();\n          setApiRaw(statsData);\n        } else {\n          setApiError(`Error HTTP: ${statsRes.status}`);\n        }\n      } catch (err) {\n        setApiError('Error de conexión: ' + err.message);\n      }\n      setStats(statsData?.stats || null);\n      setLoading(false);\n    }\n    fetchProfile();\n  }, [user]);\n\n  if (loading) return null;\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-card\">\n        <div className=\"profile-header\">\n          <img\n            src={`https://api.dicebear.com/7.x/identicon/svg?seed=${user?.uid || 'user'}`}\n            alt=\"avatar\"\n            className=\"profile-avatar\"\n            loading=\"lazy\"\n            decoding=\"async\"\n          />\n          <div>\n            <h2>{user?.displayName || user?.email}</h2>\n            <span className=\"profile-uid\">UID: {user?.uid}</span>\n          </div>\n        </div>\n        <div className=\"profile-stats\">\n          <h3>Estadísticas</h3>\n          {apiError && (\n            <div className=\"error-message\">{apiError}</div>\n          )}\n          {stats ? (\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <span className=\"stat-label\">Partidas jugadas</span>\n                <span className=\"stat-value\">{stats.gamesPlayed}</span>\n              </div>\n              <div className=\"stat-card\">\n                <span className=\"stat-label\">Victorias</span>\n                <span className=\"stat-value\">{stats.wins}</span>\n              </div>\n              <div className=\"stat-card\">\n                <span className=\"stat-label\">Respuestas correctas</span>\n                <span className=\"stat-value\">{stats.correctAnswers}</span>\n              </div>\n            </div>\n          ) : (\n            <>\n              <p>No hay estadísticas.</p>\n              {apiRaw && (\n                <details>\n                  <summary>Respuesta de la API</summary>\n                  <pre>{JSON.stringify(apiRaw, null, 2)}</pre>\n                </details>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/pages/RegisterPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'db' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'updateProfile' is defined but never used.","line":3,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'doc' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'setDoc' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { auth, db } from '../services/firebase';\nimport { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useNavigate, Link } from 'react-router-dom';\nimport './AuthPage.css';\n\nexport default function RegisterPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n    try {\n      await createUserWithEmailAndPassword(auth, email, password);\n      navigate('/complete-profile');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-page\">\n      <div className=\"auth-container\">\n        <div className=\"auth-header\">\n          <h1>⚡ BrainBlitz</h1>\n          <h2>¡Únete a la diversión!</h2>\n          <p>Crea tu cuenta y comienza a jugar</p>\n        </div>\n\n        <form onSubmit={handleRegister} className=\"auth-form\">\n          <div className=\"input-group\">\n            <input \n              type=\"email\" \n              placeholder=\"Correo electrónico\" \n              value={email} \n              onChange={e => setEmail(e.target.value)} \n              required \n              disabled={loading}\n            />\n          </div>\n          <div className=\"input-group\">\n            <input \n              type=\"password\" \n              placeholder=\"Contraseña\" \n              value={password} \n              onChange={e => setPassword(e.target.value)} \n              required \n              disabled={loading}\n            />\n          </div>\n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n          <button type=\"submit\" className=\"btn btn-primary btn-large\" disabled={loading}>\n            {loading ? 'Creando cuenta...' : 'Crear cuenta'}\n          </button>\n        </form>\n\n        <div className=\"auth-footer\">\n          <p>\n            ¿Ya tienes cuenta? <Link to=\"/login\">Inicia sesión aquí</Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/routes.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/services/api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/services/firebase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/services/firebaseConfig.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/services/mockAuth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/services/mockDb.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/services/socket.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/src/setupTests.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/ervin/Desktop/frontend-v2/vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]