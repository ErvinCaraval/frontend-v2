{"version":3,"mappings":"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","names":["AIQuestionGenerator","React","__vitePreload","DashboardPage","user","logout","useAuth","navigate","useNavigate","gameCode","setGameCode","useState","publicGames","setPublicGames","loading","setLoading","showAIGenerator","setShowAIGenerator","selectedTopic","setSelectedTopic","generatedQuestions","setGeneratedQuestions","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","fetchPublicGames","data","gamesArray","error","handleCreateGame","fixedQuestions","q","socket","token","gameId","questions","handleJoinGame","handleJoinPublicGame","handleQuestionsGenerated","_a","jsxs","jsx","e","game","_c","_b","Suspense","qs"],"ignoreList":[],"sources":["../../src/pages/DashboardPage.jsx"],"sourcesContent":["import React, { useState, useEffect, Suspense } from 'react';\nimport { useAuth } from '../AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { socket } from '../services/socket';\nconst AIQuestionGenerator = React.lazy(() => import('../components/AIQuestionGenerator'));\nimport './DashboardPage.css';\n\nexport default function DashboardPage() {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const [gameCode, setGameCode] = useState('');\n  const [publicGames, setPublicGames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showAIGenerator, setShowAIGenerator] = useState(false);\n  const [selectedTopic, setSelectedTopic] = useState('');\n  const [generatedQuestions, setGeneratedQuestions] = useState([]);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    fetchPublicGames();\n  }, []);\n\n  const fetchPublicGames = async () => {\n    try {\n  const apiBase = import.meta.env.VITE_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${apiBase}/api/games`);\n      const data = await response.json();\n      const gamesArray = Array.isArray(data) ? data : [];\n      setPublicGames(gamesArray);\n    } catch (error) {\n      console.error('Error fetching games:', error);\n      setPublicGames([]);\n    }\n  };\n\n  const handleCreateGame = async () => {\n    if (!selectedTopic) {\n      setErrorMessage('Por favor selecciona un tema antes de crear la partida.');\n      setTimeout(() => setErrorMessage(''), 4000);\n      return;\n    }\n    if (!generatedQuestions.length) {\n      setErrorMessage('Primero debes generar preguntas con IA antes de crear la partida.');\n      setTimeout(() => setErrorMessage(''), 4000);\n      return;\n    }\n    // Forzar que todas las preguntas tengan el category igual al tema seleccionado\n    const fixedQuestions = generatedQuestions.map(q => ({ ...q, category: selectedTopic }));\n    setLoading(true);\n    socket.connect();\n    // Obtener el token de autenticación del usuario\n    let token = null;\n    if (user && user.getIdToken) {\n      token = await user.getIdToken();\n    }\n    socket.emit('createGame', {\n      hostId: user.uid,\n      displayName: user.displayName || user.email,\n      isPublic: true,\n      token,\n      topic: selectedTopic,\n      questions: fixedQuestions,\n      count: fixedQuestions.length\n    });\n    socket.on('gameCreated', ({ gameId, questions }) => {\n      setLoading(false);\n      setSuccessMessage(`¡Tu partida fue creada con ${questions?.length || 0} preguntas! Invita a tus amigos y disfruta. 🚀`);\n      setTimeout(() => setSuccessMessage(''), 5000);\n      setTimeout(() => navigate(`/lobby/${gameId}`), 1200);\n    });\n    socket.on('error', ({ error }) => {\n  setLoading(false);\n  setErrorMessage('Ocurrió un error al crear la partida: ' + error);\n  setTimeout(() => setErrorMessage(''), 5000);\n    });\n  };\n\n  const handleJoinGame = () => {\n    if (!gameCode.trim()) {\n      setErrorMessage('Por favor ingresa un código de partida.');\n      setTimeout(() => setErrorMessage(''), 4000);\n      return;\n    }\n    navigate(`/lobby/${gameCode}`);\n  };\n\n  const handleJoinPublicGame = (gameId) => {\n  setSuccessMessage('¡Te uniste a la partida! Cargando sala...');\n  setTimeout(() => setSuccessMessage(''), 4000);\n  setTimeout(() => navigate(`/lobby/${gameId}`), 1200);\n  };\n\n  const handleQuestionsGenerated = (questions) => {\n    setGeneratedQuestions(questions);\n    if (questions && questions.length > 0 && questions[0].category) {\n      setSelectedTopic(questions[0].category);\n    }\n    setSuccessMessage(`¡Listo! Se generaron ${questions.length} preguntas para el tema \"${questions[0]?.category || ''}\". 🎉`);\n    setTimeout(() => setSuccessMessage(''), 5000);\n  };\n\n  return (\n    <div className=\"dashboard-page\">\n      {(successMessage || errorMessage) && (\n        <div style={{\n          position: 'fixed',\n          top: 24,\n          left: '50%',\n          transform: 'translateX(-50%)',\n          zIndex: 2000,\n          background: errorMessage ? 'rgba(239,68,68,0.97)' : 'rgba(99,102,241,0.95)',\n          color: '#fff',\n          padding: '1.1rem 2.2rem',\n          borderRadius: 18,\n          fontWeight: 700,\n          fontSize: '1.15rem',\n          boxShadow: '0 4px 24px rgba(42,122,228,0.18)',\n          border: '2px solid #fff',\n          letterSpacing: 0.5,\n          textAlign: 'center',\n          animation: 'fadeIn 0.5s',\n        }}>\n          {errorMessage || successMessage}\n        </div>\n      )}\n      <header className=\"dashboard-header\">\n        <div className=\"user-info\">\n          <h2>¡Bienvenido, {user?.displayName || user?.email}!</h2>\n          <div className=\"user-actions\">\n            <button onClick={() => navigate('/profile')} className=\"btn btn-secondary\">\n              Perfil\n            </button>\n            <button onClick={logout} className=\"btn btn-outline\">\n              Cerrar sesión\n            </button>\n          </div>\n          <style>{`\n            .btn, .btn-primary, .btn-secondary, .btn-outline, .btn-ai {\n              min-width: 140px !important;\n              font-size: 1.08rem !important;\n              white-space: nowrap !important;\n            }\n          `}</style>\n        </div>\n      </header>\n\n      <main className=\"dashboard-main\">\n        <div className=\"game-actions\">\n          <div className=\"create-game-section\">\n            <h3>🎮 Crear nueva partida</h3>\n            <p>Inicia una partida y invita a tus amigos</p>\n            <div className=\"create-game-actions\">\n              <button\n                onClick={handleCreateGame}\n                className=\"btn btn-primary btn-large\"\n                disabled={loading}\n                title=\"Primero genera preguntas con IA para que tu partida tenga contenido.\"\n              >\n                {loading ? 'Creando...' : 'Crear partida'}\n              </button>\n              <button \n                onClick={() => setShowAIGenerator(true)} \n                className=\"btn btn-ai btn-large\"\n                title=\"Genera preguntas personalizadas antes de crear tu partida.\"\n              >\n                🤖 Generar preguntas\n              </button>\n              <div style={{marginTop: 8, color: '#555', fontSize: 14}}>\n                <strong>Ayuda:</strong> Antes de crear una partida, puedes generar preguntas automáticamente o agregar preguntas manuales personalizadas. Así tu juego tendrá contenido único, reciente y adaptado a tus necesidades.\n              </div>\n            </div>\n          </div>\n\n          <div className=\"join-game-section\">\n            <h3>🔗 Unirse a partida</h3>\n            <p>Ingresa un código de 6 dígitos para unirte</p>\n            <div className=\"join-form\">\n              <input\n                type=\"text\"\n                placeholder=\"Ingresa el código de la partida\"\n                value={gameCode}\n                onChange={(e) => setGameCode(e.target.value)}\n                maxLength=\"6\"\n                className=\"game-code-input\"\n              />\n              <button onClick={handleJoinGame} className=\"btn btn-secondary\">\n                Unirse\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"public-games-section\">\n          <h3>🌐 Partidas públicas</h3>\n          <p>Únete a partidas abiertas para todos</p>\n          <div className=\"games-list\">\n            {!Array.isArray(publicGames) || publicGames.length === 0 ? (\n              <p className=\"no-games\">No hay partidas públicas disponibles por ahora</p>\n            ) : (\n              publicGames.map(game => (\n                <div key={game.id} className=\"game-card\">\n                  <div className=\"game-info\">\n                    <h4>Partida #{game.id}</h4>\n                    <p>Jugadores: {game.players?.length || 0}</p>\n                    <p>Anfitrión: {game.players?.[0]?.displayName || 'Desconocido'}</p>\n                  </div>\n                  <button \n                    onClick={() => handleJoinPublicGame(game.id)}\n                    className=\"btn btn-primary\"\n                  >\n                    Unirse\n                  </button>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </main>\n\n      {showAIGenerator && (\n          <Suspense fallback={<div>Cargando generador de preguntas...</div>}>\n        <AIQuestionGenerator\n          onQuestionsGenerated={qs => {\n            handleQuestionsGenerated(qs);\n            setShowAIGenerator(false);\n          }}\n          onClose={() => setShowAIGenerator(false)}\n        />\n          </Suspense>\n      )}\n    </div>\n  );\n}"],"file":"assets/DashboardPage-Cxijj56X.js"}