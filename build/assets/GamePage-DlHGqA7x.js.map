{"version":3,"file":"GamePage-DlHGqA7x.js","sources":["../../src/components/Question.jsx","../../src/components/Timer.jsx","../../src/pages/GamePage.jsx"],"sourcesContent":["import React from 'react';\nimport './AIQuestionGenerator.css';\n\nexport default function Question({ question, options, onSelect, selected }) {\n  return (\n    <div className=\"question-card\">\n      <h2 className=\"question-title\">{question}</h2>\n      <div className=\"options-list\">\n        {options.map((opt, idx) => (\n          <button\n            key={idx}\n            className={`option-btn${selected === idx ? ' selected' : ''}`}\n            onClick={() => onSelect(idx)}\n            disabled={selected !== null}\n          >\n            <span className=\"option-label\">{String.fromCharCode(65 + idx)})</span> {opt}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}","import React, { useEffect, useState, useRef } from 'react';\nimport './Timer.css';\n\nexport default function Timer({ seconds = 20, onEnd, onTick }) {\n  const [time, setTime] = useState(seconds);\n  const intervalRef = useRef();\n\n  useEffect(() => {\n    setTime(seconds);\n  }, [seconds]);\n\n  useEffect(() => {\n    if (time === 0) {\n      if (onEnd) onEnd();\n      return;\n    }\n    intervalRef.current = setInterval(() => {\n      setTime(t => t - 1);\n    }, 1000);\n    return () => clearInterval(intervalRef.current);\n  }, [time, onEnd]);\n\n  useEffect(() => {\n    if (onTick) onTick(time);\n  }, [time, onTick]);\n\n  const getTimerColor = () => {\n    if (time <= 3) return 'critical';\n    if (time <= 6) return 'warning';\n    return 'normal';\n  };\n\n  return (\n    <div className={`timer ${getTimerColor()}`}>\n      <div className=\"timer-circle\">\n        <span className=\"timer-text\">{time}</span>\n      </div>\n      <span className=\"timer-label\">segundos restantes</span>\n    </div>\n  );\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../AuthContext';\nimport { socket } from '../services/socket';\nimport Question from '../components/Question';\nimport Timer from '../components/Timer';\nimport Ranking from '../components/Ranking';\nimport './GamePage.css';\n\nexport default function GamePage() {\n  const [questionTimeout, setQuestionTimeout] = useState(false);\n  const { gameId } = useParams();\n  const { user } = useAuth();\n  const [question, setQuestion] = useState(null);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n  const [selected, setSelected] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState(null);\n  const [timerKey, setTimerKey] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Solicitar la primera pregunta al conectar\n    if (user && gameId) {\n      socket.emit('requestQuestion', { gameId });\n      console.log('[GamePage] Emitiendo requestQuestion:', { gameId });\n    }\n    // Si no llega pregunta en 5 segundos, mostrar error\n    const timeout = setTimeout(() => {\n      if (!question) setQuestionTimeout(true);\n    }, 5000);\n\n    if (!user) return;\n    if (!socket.connected) {\n      console.log('[GamePage] Intentando conectar socket...');\n      socket.connect();\n    }\n    // Listeners nombrados para evitar duplicados\n    function onConnect() {\n      console.log('[GamePage] Socket conectado:', socket.id);\n    }\n    function onNewQuestion({ question, index }) {\n      console.log('[GamePage] Evento newQuestion recibido:', question);\n        // Asegurarse de que las opciones no se barajen ni modifiquen\n        // y que el Ã­ndice de la respuesta correcta corresponda al array recibido\n        if (!Array.isArray(question.options)) {\n          question.options = [];\n        }\n        setQuestion({\n          ...question,\n          options: [...question.options], // Copia directa, sin barajar\n        });\n        setQuestionIndex(index);\n        setSelected(null);\n        setShowResult(false);\n        setTimeLeft(10);\n        setTimerKey(prev => prev + 1);\n    }\n    function onAnswerResult({ correctAnswerIndex, explanation, players }) {\n      console.log('[GamePage] Evento answerResult recibido:', { correctAnswerIndex, explanation, players });\n      setShowResult(true);\n      setResult({ correctAnswerIndex, explanation });\n      setPlayers(players);\n    }\n    function onGameFinished({ players }) {\n      console.log('[GamePage] Evento gameFinished recibido:', players);\n      navigate(`/summary/${gameId}`, { state: { players } });\n    }\n    function onGameStarted({ questionsCount }) {\n      console.log('[GamePage] Evento gameStarted recibido:', questionsCount);\n      setTotalQuestions(questionsCount);\n    }\n\n    socket.on('connect', onConnect);\n    socket.on('newQuestion', onNewQuestion);\n    socket.on('answerResult', onAnswerResult);\n    socket.on('gameFinished', onGameFinished);\n    socket.on('gameStarted', onGameStarted);\n\n    return () => {\n      socket.off('connect', onConnect);\n      socket.off('newQuestion', onNewQuestion);\n      socket.off('answerResult', onAnswerResult);\n      socket.off('gameFinished', onGameFinished);\n      socket.off('gameStarted', onGameStarted);\n    };\n  }, [user, gameId, navigate]);\n\n  const handleSelect = useCallback((idx) => {\n    if (selected !== null) return; // Prevent multiple selections\n    setSelected(idx);\n    // Enviar tambiÃ©n el valor de la opciÃ³n seleccionada\n    const answerValue = question && Array.isArray(question.options) ? question.options[idx] : undefined;\n    socket.emit('submitAnswer', { gameId, uid: user.uid, answerIndex: idx, answerValue });\n  }, [gameId, user, selected]);\n\n  const handleTimerEnd = useCallback(() => {\n    if (selected === null) {\n      socket.emit('submitAnswer', { gameId, uid: user.uid, answerIndex: null, answerValue: null });\n    }\n  }, [gameId, user, selected]);\n\n  const getOptionColor = (index) => {\n    if (!showResult) {\n      return selected === index ? 'selected' : '';\n    }\n    \n    if (index === result.correctAnswerIndex) {\n      return 'correct';\n    }\n    \n    if (selected === index && index !== result.correctAnswerIndex) {\n      return 'incorrect';\n    }\n    \n    return '';\n  };\n\n  const getPlayerRank = () => {\n    const sortedPlayers = [...players].sort((a, b) => b.score - a.score);\n    const playerIndex = sortedPlayers.findIndex(p => p.uid === user.uid);\n    return playerIndex + 1;\n  };\n\n  return (\n    <div className=\"game-page\">\n      <header className=\"game-header\">\n        <div className=\"game-info\">\n          <h2>ðŸŽ¯ Juego de Preguntas</h2>\n          <div className=\"progress-info\">\n            <span className=\"question-counter\">\n              Pregunta {questionIndex + 1} de {totalQuestions || '?'}\n            </span>\n            <div className=\"progress-bar\">\n              <div \n                className=\"progress-fill\" \n                style={{ width: `${((questionIndex + 1) / (totalQuestions || 1)) * 100}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"player-rank\">\n          <span className=\"rank-number\">#{getPlayerRank()}</span>\n          <span className=\"rank-label\">Tu posiciÃ³n</span>\n        </div>\n      </header>\n\n      <main className=\"game-main\">\n        {question && (\n          <div className=\"question-container\">\n            <div className=\"question-header\">\n              <Question\n                question={question.question}\n                options={question.options}\n                onSelect={handleSelect}\n                selected={selected}\n              />\n              {!showResult && (\n                <Timer\n                  key={timerKey}\n                  seconds={10}\n                  onEnd={handleTimerEnd}\n                  onTick={setTimeLeft}\n                />\n              )}\n            </div>\n            {showResult && result && (\n              <div className=\"result-container\">\n                <div className=\"result-header\">\n                  <h4>âœ… Â¡Respuesta revelada!</h4>\n                </div>\n                <div className=\"correct-answer\">\n                  <strong>Respuesta correcta:</strong> {question.options[result.correctAnswerIndex]}\n                </div>\n                {result.explanation && (\n                  <div className=\"explanation\">\n                    <strong>ExplicaciÃ³n:</strong> {result.explanation}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {!question && !questionTimeout && (\n          <div className=\"waiting-container\">\n            <div className=\"loading-spinner\"></div>\n            <p>Esperando la siguiente pregunta...</p>\n          </div>\n        )}\n        {!question && questionTimeout && (\n          <div className=\"waiting-container\">\n            <div className=\"loading-spinner\"></div>\n            <p style={{color: 'red', fontWeight: 'bold'}}>No se encontraron preguntas para este tema. Verifica que hayas generado preguntas y que el tema coincida exactamente.</p>\n          </div>\n        )}\n      </main>\n\n      <aside className=\"game-sidebar\">\n        <Ranking players={players} />\n      </aside>\n    </div>\n  );\n}"],"names":["Question","question","options","onSelect","selected","jsxs","jsx","opt","idx","Timer","seconds","onEnd","onTick","time","setTime","useState","intervalRef","useRef","useEffect","t","getTimerColor","GamePage","questionTimeout","setQuestionTimeout","gameId","useParams","user","useAuth","setQuestion","questionIndex","setQuestionIndex","totalQuestions","setTotalQuestions","setSelected","players","setPlayers","showResult","setShowResult","result","setResult","timerKey","setTimerKey","timeLeft","setTimeLeft","navigate","useNavigate","socket","onConnect","onNewQuestion","index","prev","onAnswerResult","correctAnswerIndex","explanation","onGameFinished","onGameStarted","questionsCount","handleSelect","useCallback","answerValue","handleTimerEnd","getPlayerRank","a","b","p","Ranking"],"mappings":"iMAGA,SAAwBA,EAAS,CAAE,SAAAC,EAAU,QAAAC,EAAS,SAAAC,EAAU,SAAAC,GAAY,CAC1E,OACEC,EAAAA,KAAC,MAAA,CAAI,UAAU,gBACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,iBAAkB,SAAAL,EAAS,EACzCK,EAAAA,IAAC,OAAI,UAAU,eACZ,WAAQ,IAAI,CAACC,EAAKC,IACjBH,EAAAA,KAAC,SAAA,CAEC,UAAW,aAAaD,IAAaI,EAAM,YAAc,EAAE,GAC3D,QAAS,IAAML,EAASK,CAAG,EAC3B,SAAUJ,IAAa,KAEvB,SAAA,CAAAC,EAAAA,KAAC,OAAA,CAAK,UAAU,eAAgB,SAAA,CAAA,OAAO,aAAa,GAAKG,CAAG,EAAE,GAAA,EAAC,EAAO,IAAED,CAAA,CAAA,EALnEC,CAAA,CAOR,CAAA,CACH,CAAA,EACF,CAEJ,CClBA,SAAwBC,EAAM,CAAE,QAAAC,EAAU,GAAI,MAAAC,EAAO,OAAAC,GAAU,CAC7D,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAASL,CAAO,EAClCM,EAAcC,EAAAA,OAAA,EAEpBC,EAAAA,UAAU,IAAM,CACdJ,EAAQJ,CAAO,CACjB,EAAG,CAACA,CAAO,CAAC,EAEZQ,EAAAA,UAAU,IAAM,CACd,GAAIL,IAAS,EAAG,CACVF,GAAOA,EAAA,EACX,MACF,CACA,OAAAK,EAAY,QAAU,YAAY,IAAM,CACtCF,EAAQK,GAAKA,EAAI,CAAC,CACpB,EAAG,GAAI,EACA,IAAM,cAAcH,EAAY,OAAO,CAChD,EAAG,CAACH,EAAMF,CAAK,CAAC,EAEhBO,EAAAA,UAAU,IAAM,CACVN,KAAeC,CAAI,CACzB,EAAG,CAACA,EAAMD,CAAM,CAAC,EAEjB,MAAMQ,EAAgB,IAChBP,GAAQ,EAAU,WAClBA,GAAQ,EAAU,UACf,SAGT,cACG,MAAA,CAAI,UAAW,SAASO,EAAA,CAAe,GACtC,SAAA,CAAAd,EAAAA,IAAC,MAAA,CAAI,UAAU,eACb,SAAAA,EAAAA,IAAC,QAAK,UAAU,aAAc,WAAK,CAAA,CACrC,EACAA,EAAAA,IAAC,OAAA,CAAK,UAAU,cAAc,SAAA,oBAAA,CAAkB,CAAA,EAClD,CAEJ,CC/BA,SAAwBe,GAAW,CACjC,KAAM,CAACC,EAAiBC,CAAkB,EAAIR,EAAAA,SAAS,EAAK,EACtD,CAAE,OAAAS,CAAA,EAAWC,EAAA,EACb,CAAE,KAAAC,CAAA,EAASC,EAAA,EACX,CAAC1B,EAAU2B,CAAW,EAAIb,EAAAA,SAAS,IAAI,EACvC,CAACc,EAAeC,CAAgB,EAAIf,EAAAA,SAAS,CAAC,EAC9C,CAACgB,EAAgBC,CAAiB,EAAIjB,EAAAA,SAAS,CAAC,EAChD,CAACX,EAAU6B,CAAW,EAAIlB,EAAAA,SAAS,IAAI,EACvC,CAACmB,EAASC,CAAU,EAAIpB,EAAAA,SAAS,CAAA,CAAE,EACnC,CAACqB,EAAYC,CAAa,EAAItB,EAAAA,SAAS,EAAK,EAC5C,CAACuB,EAAQC,CAAS,EAAIxB,EAAAA,SAAS,IAAI,EACnC,CAACyB,EAAUC,CAAW,EAAI1B,EAAAA,SAAS,CAAC,EACpC,CAAC2B,EAAUC,CAAW,EAAI5B,EAAAA,SAAS,EAAE,EACrC6B,EAAWC,EAAA,EAEjB3B,EAAAA,UAAU,IAAM,CAWd,GATIQ,GAAQF,IACVsB,EAAO,KAAK,kBAAmB,CAAE,OAAAtB,CAAA,CAAQ,EACzC,QAAQ,IAAI,wCAAyC,CAAE,OAAAA,CAAA,CAAQ,GAGjD,WAAW,IAAM,CAC1BvB,GAAUsB,EAAmB,EAAI,CACxC,EAAG,GAAI,EAEH,CAACG,EAAM,OACNoB,EAAO,YACV,QAAQ,IAAI,0CAA0C,EACtDA,EAAO,QAAA,GAGT,SAASC,GAAY,CACnB,QAAQ,IAAI,+BAAgCD,EAAO,EAAE,CACvD,CACA,SAASE,EAAc,CAAE,SAAA/C,EAAU,MAAAgD,GAAS,CAC1C,QAAQ,IAAI,0CAA2ChD,CAAQ,EAGxD,MAAM,QAAQA,EAAS,OAAO,IACjCA,EAAS,QAAU,CAAA,GAErB2B,EAAY,CACV,GAAG3B,EACH,QAAS,CAAC,GAAGA,EAAS,OAAO,CAAA,CAC9B,EACD6B,EAAiBmB,CAAK,EACtBhB,EAAY,IAAI,EAChBI,EAAc,EAAK,EACnBM,EAAY,EAAE,EACdF,EAAYS,GAAQA,EAAO,CAAC,CAChC,CACA,SAASC,EAAe,CAAE,mBAAAC,EAAoB,YAAAC,EAAa,QAAAnB,GAAW,CACpE,QAAQ,IAAI,2CAA4C,CAAE,mBAAAkB,EAAoB,YAAAC,EAAa,QAAAnB,EAAS,EACpGG,EAAc,EAAI,EAClBE,EAAU,CAAE,mBAAAa,EAAoB,YAAAC,EAAa,EAC7ClB,EAAWD,CAAO,CACpB,CACA,SAASoB,EAAe,CAAE,QAAApB,GAAW,CACnC,QAAQ,IAAI,2CAA4CA,CAAO,EAC/DU,EAAS,YAAYpB,CAAM,GAAI,CAAE,MAAO,CAAE,QAAAU,CAAAA,EAAW,CACvD,CACA,SAASqB,EAAc,CAAE,eAAAC,GAAkB,CACzC,QAAQ,IAAI,0CAA2CA,CAAc,EACrExB,EAAkBwB,CAAc,CAClC,CAEA,OAAAV,EAAO,GAAG,UAAWC,CAAS,EAC9BD,EAAO,GAAG,cAAeE,CAAa,EACtCF,EAAO,GAAG,eAAgBK,CAAc,EACxCL,EAAO,GAAG,eAAgBQ,CAAc,EACxCR,EAAO,GAAG,cAAeS,CAAa,EAE/B,IAAM,CACXT,EAAO,IAAI,UAAWC,CAAS,EAC/BD,EAAO,IAAI,cAAeE,CAAa,EACvCF,EAAO,IAAI,eAAgBK,CAAc,EACzCL,EAAO,IAAI,eAAgBQ,CAAc,EACzCR,EAAO,IAAI,cAAeS,CAAa,CACzC,CACF,EAAG,CAAC7B,EAAMF,EAAQoB,CAAQ,CAAC,EAE3B,MAAMa,EAAeC,cAAalD,GAAQ,CACxC,GAAIJ,IAAa,KAAM,OACvB6B,EAAYzB,CAAG,EAEf,MAAMmD,EAAc1D,GAAY,MAAM,QAAQA,EAAS,OAAO,EAAIA,EAAS,QAAQO,CAAG,EAAI,OAC1FsC,EAAO,KAAK,eAAgB,CAAE,OAAAtB,EAAQ,IAAKE,EAAK,IAAK,YAAalB,EAAK,YAAAmD,CAAA,CAAa,CACtF,EAAG,CAACnC,EAAQE,EAAMtB,CAAQ,CAAC,EAErBwD,EAAiBF,EAAAA,YAAY,IAAM,CACnCtD,IAAa,MACf0C,EAAO,KAAK,eAAgB,CAAE,OAAAtB,EAAQ,IAAKE,EAAK,IAAK,YAAa,KAAM,YAAa,IAAA,CAAM,CAE/F,EAAG,CAACF,EAAQE,EAAMtB,CAAQ,CAAC,EAkBrByD,EAAgB,IACE,CAAC,GAAG3B,CAAO,EAAE,KAAK,CAAC4B,EAAGC,IAAMA,EAAE,MAAQD,EAAE,KAAK,EACjC,aAAeE,EAAE,MAAQtC,EAAK,GAAG,EAC9C,EAGvB,OACErB,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,SAAA,CAAO,UAAU,cAChB,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAA,uBAAA,CAAqB,EACzBD,EAAAA,KAAC,MAAA,CAAI,UAAU,gBACb,SAAA,CAAAA,EAAAA,KAAC,OAAA,CAAK,UAAU,mBAAmB,SAAA,CAAA,YACvBwB,EAAgB,EAAE,OAAKE,GAAkB,GAAA,EACrD,EACAzB,EAAAA,IAAC,MAAA,CAAI,UAAU,eACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,gBACV,MAAO,CAAE,MAAO,IAAKuB,EAAgB,IAAME,GAAkB,GAAM,GAAG,GAAA,CAAI,CAAA,CAC3E,CACH,CAAA,CAAA,CACF,CAAA,EACF,EACA1B,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAA,EAAAA,KAAC,OAAA,CAAK,UAAU,cAAc,SAAA,CAAA,IAAEwD,EAAA,CAAc,EAAE,EAChDvD,EAAAA,IAAC,OAAA,CAAK,UAAU,aAAa,SAAA,aAAA,CAAW,CAAA,CAAA,CAC1C,CAAA,EACF,EAEAD,EAAAA,KAAC,OAAA,CAAK,UAAU,YACb,SAAA,CAAAJ,GACCI,EAAAA,KAAC,MAAA,CAAI,UAAU,qBACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,kBACb,SAAA,CAAAC,EAAAA,IAACN,EAAA,CACC,SAAUC,EAAS,SACnB,QAASA,EAAS,QAClB,SAAUwD,EACV,SAAArD,CAAA,CAAA,EAED,CAACgC,GACA9B,EAAAA,IAACG,EAAA,CAEC,QAAS,GACT,MAAOmD,EACP,OAAQjB,CAAA,EAHHH,CAAA,CAIP,EAEJ,EACCJ,GAAcE,GACbjC,OAAC,MAAA,CAAI,UAAU,mBACb,SAAA,CAAAC,EAAAA,IAAC,OAAI,UAAU,gBACb,SAAAA,MAAC,KAAA,CAAG,kCAAsB,CAAA,CAC5B,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,iBACb,SAAA,CAAAC,EAAAA,IAAC,UAAO,SAAA,qBAAA,CAAmB,EAAS,IAAEL,EAAS,QAAQqC,EAAO,kBAAkB,CAAA,EAClF,EACCA,EAAO,aACNjC,OAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,UAAO,SAAA,cAAA,CAAY,EAAS,IAAEgC,EAAO,WAAA,CAAA,CACxC,CAAA,CAAA,CAEJ,CAAA,EAEJ,EAGD,CAACrC,GAAY,CAACqB,GACbjB,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,iBAAA,CAAkB,EACjCA,EAAAA,IAAC,KAAE,SAAA,oCAAA,CAAkC,CAAA,EACvC,EAED,CAACL,GAAYqB,GACZjB,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,iBAAA,CAAkB,EACjCA,EAAAA,IAAC,KAAE,MAAO,CAAC,MAAO,MAAO,WAAY,MAAA,EAAS,SAAA,uHAAA,CAAqH,CAAA,CAAA,CACrK,CAAA,EAEJ,QAEC,QAAA,CAAM,UAAU,eACf,SAAAA,EAAAA,IAAC2D,EAAA,CAAQ,QAAA/B,EAAkB,CAAA,CAC7B,CAAA,EACF,CAEJ"}