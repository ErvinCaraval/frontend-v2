{"version":3,"file":"AdminPage-JiqiyzMz.js","sources":["../../src/services/mockDb.js","../../src/pages/AdminPage.jsx"],"sourcesContent":["// Mock database service for testing without Firebase\nclass MockDb {\n  constructor() {\n    this.data = {\n      users: new Map(),\n      games: new Map(),\n      questions: new Map()\n    };\n  }\n\n  // Mock collection reference\n  collection(name) {\n    return {\n      doc: (id) => ({\n        get: () => Promise.resolve({\n          exists: this.data[name].has(id),\n          data: () => this.data[name].get(id)\n        }),\n        set: (data) => {\n          this.data[name].set(id, data);\n          return Promise.resolve();\n        },\n        update: (data) => {\n          const existing = this.data[name].get(id) || {};\n          this.data[name].set(id, { ...existing, ...data });\n          return Promise.resolve();\n        },\n        delete: () => {\n          this.data[name].delete(id);\n          return Promise.resolve();\n        }\n      }),\n      add: (data) => {\n        const id = 'doc-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n        this.data[name].set(id, data);\n        return Promise.resolve({ id });\n      },\n      get: () => Promise.resolve({\n        docs: Array.from(this.data[name].entries()).map(([id, data]) => ({\n          id,\n          data: () => data\n        }))\n      })\n    };\n  }\n}\n\n// Create singleton instance\nconst mockDb = new MockDb();\n\nexport default mockDb;\n\n","import React, { useEffect, useState } from 'react';\nimport mockDb from '../services/mockDb';\n\nconst emptyForm = {\n  text: '',\n  options: ['', '', '', ''],\n  correctAnswerIndex: 0,\n  category: '',\n  explanation: ''\n};\n\nexport default function AdminPage() {\n  const [questions, setQuestions] = useState([]);\n  const [form, setForm] = useState(emptyForm);\n  const [editingId, setEditingId] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchQuestions = async () => {\n    setLoading(true);\n    const snap = await mockDb.collection('questions').get();\n    setQuestions(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n    setLoading(false);\n  };\n\n  useEffect(() => { fetchQuestions(); }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setForm(f => ({ ...f, [name]: value }));\n  };\n  const handleOptionChange = (idx, value) => {\n    setForm(f => {\n      const options = [...f.options];\n      options[idx] = value;\n      return { ...f, options };\n    });\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (editingId) {\n      await mockDb.collection('questions').doc(editingId).update(form);\n    } else {\n      await mockDb.collection('questions').add(form);\n    }\n    setForm(emptyForm);\n    setEditingId(null);\n    fetchQuestions();\n  };\n  const handleEdit = (q) => {\n    setForm(q);\n    setEditingId(q.id);\n  };\n  const handleDelete = async (id) => {\n    await mockDb.collection('questions').doc(id).delete();\n    fetchQuestions();\n  };\n\n  return (\n    <div>\n      <h2>Admin Panel</h2>\n      <form onSubmit={handleSubmit}>\n        <input name=\"text\" value={form.text} onChange={handleChange} placeholder=\"Question text\" required />\n        <input name=\"category\" value={form.category} onChange={handleChange} placeholder=\"Category\" required />\n        <input name=\"explanation\" value={form.explanation} onChange={handleChange} placeholder=\"Explanation\" required />\n        {form.options.map((opt, idx) => (\n          <div key={idx}>\n            <input\n              value={opt}\n              onChange={e => handleOptionChange(idx, e.target.value)}\n              placeholder={`Option ${idx + 1}`}\n              required\n            />\n            <input\n              type=\"radio\"\n              name=\"correctAnswerIndex\"\n              checked={form.correctAnswerIndex === idx}\n              onChange={() => setForm(f => ({ ...f, correctAnswerIndex: idx }))}\n            /> Correct\n          </div>\n        ))}\n        <button type=\"submit\">{editingId ? 'Update' : 'Add'} Question</button>\n        {editingId && <button type=\"button\" onClick={() => { setForm(emptyForm); setEditingId(null); }}>Cancel</button>}\n      </form>\n      <hr />\n      <h3>Questions</h3>\n      {loading ? <p>Loading...</p> : (\n        <table border=\"1\">\n          <thead>\n            <tr>\n              <th>Text</th>\n              <th>Category</th>\n              <th>Options</th>\n              <th>Correct</th>\n              <th>Explanation</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {questions.map(q => (\n              <tr key={q.id}>\n                <td>{q.text}</td>\n                <td>{q.category}</td>\n                <td>{q.options.join(', ')}</td>\n                <td>{q.options[q.correctAnswerIndex]}</td>\n                <td>{q.explanation}</td>\n                <td>\n                  <button onClick={() => handleEdit(q)}>Edit</button>\n                  <button onClick={() => handleDelete(q.id)}>Delete</button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}"],"names":["MockDb","name","id","data","existing","mockDb","emptyForm","AdminPage","questions","setQuestions","useState","form","setForm","editingId","setEditingId","loading","setLoading","fetchQuestions","snap","doc","useEffect","handleChange","e","value","f","handleOptionChange","idx","options","handleSubmit","handleEdit","q","handleDelete","jsx","jsxs","opt"],"mappings":"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"}